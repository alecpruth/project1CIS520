CIS 520 - Programming Project 1


--- GROUP ---

Travis Atchison <travis14@ksu.edu>
Cre Moore       <camoore@ksu.edu>
Alec Ruth       <alecpruth@ksu.edu>

----Preliminaries----
Throughout our project, we, along with several other groups,
received a substantial amount of assistance from the TA Chandra.
If you notice any similarities in coding style or functions between 
our solution and other groups, this is most likely the reason why.

		ALARM CLOCK
		===========

---- DATA STRUCTURES ----
A1.
timer.c
	sema_list
		A list of semaphores that ensure that each thread waits until it is ready without busy waiting.
	timer_sleep
		Implements our new algorithm for having threads wait.
	timer_interrupt
		Wakes up the thread at the front of blocked_list, assuming that it has waited long enough.
timer.h
	wakeup_ticks
		If the thread is asleep, the tick time when it is allowed to wake up.
	waiting_for
		The reason why the thread is waiting/sleeping. Used in timer_interrupt.
	Reference to sema_list
my-alarm.c
	Used to test new timer_sleep in safe environment.
my-tests.c
	Used to test the priority scheduler and priority donation.
tests.c & tests.h
	References to my-alarm.c and my-tests.c and the corresponding tests.
Makefile.tests
	Added my-alarm.c and my-tests.c to src files.
list.c
	list_insert_wakeupticks
		Inserts into the list based on the threads wakeup_ticks. Higher wakeup_ticks = closer to the front.
list.h
	Reference to list_insert_wakeupticks.

---- ALGORITHMS ----
A2. When timer_sleep is called, we get the current thread and calculate when we want this thread to wake up.
Then, we temporarily disable interrupts to achieve atomicity. Then, we insert the thread into a list of waiting 
threads, which is sorted in increasing order of wakeup time. Then, we create a new semaphore, assign it to the 
thread's timeevent_sema field, and set the semaphore to down. Finally, we restore the interrupts to normal and 
allow things to continue.

A3. Steps taken to minimize time in interrupt
We minimize time in the interrupt by only checking list elements
until we find one that should not wakeup. At this point, we immediately exit
the while loop and leave the interrupt.

---- SYNCHRONIZATION ----
A4. We are not too worried about multiple threads calling timer_sleep at the same time. The only
issue that may arise there is when the threads are inserted into the waiting_list, but our scheduler 
ensures that each thread is placed in the list in the correct order.

A5. In order to prevent race conditions, we disable interrupts during the portion 
where we insert elements into the waiting list. This ensures that there will not be any 
race conditions that would mess up the order to the list.

---- RATIONALE ----
A6. Why this implementation over others?
We considered just using block/unblock instead of semaphores, since it was
simpler and, with a small number of threads, worked pretty much the same. However, 
this changed greatly once we reached a much larger number of threads. Using semaphores 
was simply the safest way we could get the threads to wait without holding up the 
rest of the system.


		PRIORITY
		========

---- DATA STRUCTURES ----
B1.
synch.c
	sema_down
		Changed so that the waiters_list is sorted in increasing order of priority.
	my_lock_acquire
		Behaves like lock_acquire, except that it also handles priority donation.
	lock_release
		Changed to reset to old priority if current priority was donated.
synch.h
	Added a reference to my_lock_acquire.
thread.h
	prev_priority
		Keeps track of the thread's priority before donation.
	timeevent_sema
	donors_list
		Keep track of all the threads that have donated priority to this thread.
	donees_list
		Keeps track of all the threads that this thread has donated priority to.
thread.c
	thread_unblock
	thread_yield
	donate_priority
	thread_set_priority
	thread_get_priority
list.c
	list_insert_priority
		Inserts the thread's list element into ready queue based on its priority. Higher priority = closer to the front.
	priority_sorted
		Compares the priority values of two threads, then returns if the first thread has a greatere priority or not.
list.h
	Reference to list_insert_priority

B2. 
donors_list
donees_list
prev_priority

---- ALGORITHMS ----
B3. We ensure that the highest priority thread wakes first by having the ready list
be sorted in decreasing order of priority. When the OS goes to execute the next thread,
it just pops the front element of the ready list, which will always be the element
with the highest priority.

B4. First, we identify the current thread and the thread that currently holds the lock. Then, if the 
lock is being held by another thread, we check to see if the locked_thread's priority is lower than 
the current thread's priority. In that case, the current thread donates it priority to the locked thread. 
Nested thread donations are handled with the donor/donee lists in the threads. After the situation of priority 
is settled, we call sema_down on the lock and then grab it once it becomes available.

B5. The lock_release procedure is basically identical to the original procedure, except in the case of the thread 
having donated priority. In that case, we reset the thread's priority back to its previous value and remove the 
donor thread from the donors_list. We don't remove the current thread from the donor thread's donees_list, but 
that isn't a problem since we really just use that to keep track of which thread's were donated to.

---- SYNCHRONIZATION ----
B6. A potential race condition in thread_set_priority comes from a thread donating its priority. If a thread donate's its
priority to a different thread but then is set to a new priority shortly after, then the donee thread will not have the donor 
thread's real priority. We solve this by having the thread also change the priorities of all its donee threads.

---- RATIONALE ----
B7.Why this design over others

